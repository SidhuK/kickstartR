---
description:
globs:
alwaysApply: false
---
# R Package Development Standards

This is an R package project following standard R package development practices.

## Core Standards

### Code Style
- Use camelCase for function names (e.g., `initializeProject`)
- Use snake_case for parameter names and variables
- Use roxygen2 for documentation with `#'` comments
- Follow the tidyverse style guide for R code
- Use consistent indentation (2 spaces)
- Maximum line length of 80 characters

### Documentation Requirements
- Every exported function MUST have complete roxygen2 documentation
- Include `@param` for all parameters with clear descriptions
- Include `@return` describing what the function returns
- Include `@export` for functions to be exported
- Include `@examples` with executable examples (use `\dontrun{}` for examples that create files)
- Use `@importFrom` for specific function imports rather than entire packages

### File Organization
- All R functions go in the `R/` directory
- One function per file is preferred for clarity
- Test files in `tests/testthat/` with `test-` prefix
- Documentation files auto-generated in `man/`
- Package metadata in `DESCRIPTION` file
- Namespace management in `NAMESPACE` file (auto-generated by roxygen2)

### Function Design
- Functions should have clear, single responsibilities
- Use defensive programming with input validation
- Provide meaningful error messages with `stop()` or `warning()`
- Return values should be documented and consistent
- Use `message()` for informational output to users
- Consider backward compatibility when modifying functions

### Dependencies
- Minimize dependencies - only add what's truly necessary
- Use `Imports:` in DESCRIPTION for required packages
- Use `Suggests:` for optional packages (testing, documentation)
- Use `@importFrom package function` in roxygen comments for specific imports
- Avoid using `library()` calls within package functions

### Testing
- Write tests for all exported functions
- Use testthat framework for unit tests
- Test edge cases and error conditions
- Aim for high code coverage
- Test files should mirror the structure of R/ directory

## Project Structure Context

This package creates standardized project structures for R analysis projects. Key components:

- Main function: `initialize_project()` in [R/initialize_project.R](mdc:R/initialize_project.R)
- Package metadata: [DESCRIPTION](mdc:DESCRIPTION)
- Documentation: [README.md](mdc:README.md)
- Project configuration: [_pkgdown.yml](mdc:_pkgdown.yml)

## Development Workflow

1. Make changes to R functions in `R/` directory
2. Update roxygen2 documentation comments
3. Run `devtools::document()` to update NAMESPACE and man/ files
4. Run `devtools::check()` to validate package
5. Run tests with `devtools::test()`
6. Build and install with `devtools::install()`

## Common Commands

```r
# Development workflow
devtools::load_all()      # Load package functions for testing
devtools::document()      # Generate documentation
devtools::check()         # Check package for errors
devtools::test()          # Run unit tests
devtools::install()       # Install package locally

# Building and sharing
devtools::build()         # Build source package
pkgdown::build_site()     # Build documentation website
```
